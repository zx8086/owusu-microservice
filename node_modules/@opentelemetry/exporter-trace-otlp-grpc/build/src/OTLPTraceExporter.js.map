{"version":3,"file":"OTLPTraceExporter.js","sourceRoot":"","sources":["../../src/OTLPTraceExporter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAGH,sFAGiD;AACjD,8CAA2D;AAC3D,2CAAyC;AACzC,oFAKgD;AAEhD,MAAM,qBAAqB,GAAG,gBAAgB,CAAC;AAE/C;;GAEG;AACH,MAAa,iBACX,SAAQ,kDACoE;IAG5E,YAAY,SAAqC,EAAE;QACjD,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,MAAM,OAAO,GAAG,mBAAY,CAAC,uBAAuB,CAAC,IAAA,aAAM,GAAE,CAAC,iCAAiC,CAAC,CAAC;QACjG,IAAI,CAAC,QAAQ,KAAb,IAAI,CAAC,QAAQ,GAAK,IAAI,kBAAQ,EAAE,EAAC;QACjC,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC5C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SACzB;IACH,CAAC;IAED,OAAO,CACL,KAAqB;QAErB,OAAO,IAAA,0DAA+B,EAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACtD,CAAC;IAED,aAAa,CAAC,MAAkC;QAC9C,OAAO,OAAO,MAAM,CAAC,GAAG,KAAK,QAAQ;YACnC,CAAC,CAAC,IAAA,iDAAuB,EAAC,MAAM,CAAC,GAAG,CAAC;YACrC,CAAC,CAAC,IAAA,aAAM,GAAE,CAAC,kCAAkC,CAAC,MAAM,GAAG,CAAC;gBACtD,CAAC,CAAC,IAAA,iDAAuB,EAAC,IAAA,aAAM,GAAE,CAAC,kCAAkC,CAAC;gBACtE,CAAC,CAAC,IAAA,aAAM,GAAE,CAAC,2BAA2B,CAAC,MAAM,GAAG,CAAC;oBAC/C,CAAC,CAAC,IAAA,iDAAuB,EAAC,IAAA,aAAM,GAAE,CAAC,2BAA2B,CAAC;oBAC/D,CAAC,CAAC,qBAAqB,CAAC;IAChC,CAAC;IAED,oBAAoB;QAClB,OAAO,2CAAiB,CAAC,KAAK,CAAC;IACjC,CAAC;IAED,mBAAmB;QACjB,OAAO,4DAA4D,CAAC;IACtE,CAAC;CACF;AArCD,8CAqCC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ReadableSpan, SpanExporter } from '@opentelemetry/sdk-trace-base';\nimport {\n  otlpTypes,\n  toOTLPExportTraceServiceRequest,\n} from '@opentelemetry/exporter-trace-otlp-http';\nimport { baggageUtils, getEnv } from '@opentelemetry/core';\nimport { Metadata } from '@grpc/grpc-js';\nimport {\n  OTLPGRPCExporterConfigNode,\n  OTLPGRPCExporterNodeBase,\n  ServiceClientType,\n  validateAndNormalizeUrl\n} from '@opentelemetry/otlp-grpc-exporter-base';\n\nconst DEFAULT_COLLECTOR_URL = 'localhost:4317';\n\n/**\n * OTLP Trace Exporter for Node\n */\nexport class OTLPTraceExporter\n  extends OTLPGRPCExporterNodeBase<ReadableSpan,\n    otlpTypes.opentelemetryProto.collector.trace.v1.ExportTraceServiceRequest>\n  implements SpanExporter {\n\n  constructor(config: OTLPGRPCExporterConfigNode = {}) {\n    super(config);\n    const headers = baggageUtils.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_TRACES_HEADERS);\n    this.metadata ||= new Metadata();\n    for (const [k, v] of Object.entries(headers)) {\n      this.metadata.set(k, v);\n    }\n  }\n\n  convert(\n    spans: ReadableSpan[]\n  ): otlpTypes.opentelemetryProto.collector.trace.v1.ExportTraceServiceRequest {\n    return toOTLPExportTraceServiceRequest(spans, this);\n  }\n\n  getDefaultUrl(config: OTLPGRPCExporterConfigNode) {\n    return typeof config.url === 'string'\n      ? validateAndNormalizeUrl(config.url)\n      : getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT.length > 0\n        ? validateAndNormalizeUrl(getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT)\n        : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n          ? validateAndNormalizeUrl(getEnv().OTEL_EXPORTER_OTLP_ENDPOINT)\n          : DEFAULT_COLLECTOR_URL;\n  }\n\n  getServiceClientType() {\n    return ServiceClientType.SPANS;\n  }\n\n  getServiceProtoPath(): string {\n    return 'opentelemetry/proto/collector/trace/v1/trace_service.proto';\n  }\n}\n"]}